# UCTAMAS

# Workshop 1 - Docker refresh

--Common commands-

docker container ls -a
docker volume ls -a
docker ps <- Only shows running
docker ps -a <- Shows stopped and running containers
docker stop ID or NAME
docker inspect ID or NAME <- ID is random number while NAME is defined
docker info < - Get OS config related to docker deployment
docker run  <- Create and run a new container from an image
docker create < - Creates a new container from the specified image, without starting it.
docker exec < - Run command on running container

Task 1. Range check - Ensure you can login to the range.

Task 2. Malware-daily.py usage

python3 malware-daily.py -p myfolder <- Pulls previous dates samples from Malware Bazaar
python3 malware-daily.py -q myHashValue <- Queries Malware Bazaar for a given md5/sha1/sha256/ value

Task 3. Pull images / run / start and stop containers

docker pull python:3.7.15-alpine3.17
docker run -dit --name myalpine python:3.7.15-alpine3.17
docker stop myalpine
docker start myalpine

Task 4. Mounts and volumes

docker run -dit --mount type=bind,source=/etc/shadow,target=/myShadow alpine:latest
docker run -dit -v /etc/shadow:/myShadow alpine:latest

docker volume create myvolume
docker run -dit -v myvolume:/myvolume alpine:latest
docker run -dit --mount source=myvolume,target=/myvolume alpine:latest

Task 5. Add files / tools to containers and volumes

docker volume create tools
docker volume create samples
docker run -dit --name yarGen -v tools:/tools -v samples:/samples python:3.7.15-alpine3.17
docker cp yarGen-master.zip yarGen:/tools
docker cp yarGen-master.zip yarGen:/opt/
docker exec -it yarGen sh

or

docker exec -it unzip /tools/yarGen-Master.zip
docker exec -it python3 /tools/yarGen-Master/yarGen.py --update
docker exec -it yarGen sh

or

docker info < - Look at Docker Root Dir "/var/lib/docker"
cp YourTools /var/lib/docker/volumes/tools/_data/  < - Easier this way and still valid way when storage driver is default overlay2


python3 yarGen.py --update

Bonus: docker exec -it yarGen python3 /tools/yarGen-Master/yarGen.py
Question: why is this inefficient?

Task 6. Commit / save base container with samples and tool volumes
docker commit -m "Some changes on this day" yarGen mylocalyargen:mar252023 < - pauses running containers creates new image
docker save mylocalyargen:mar252023 -o myexport.tar  < - you can share tar with someone else
docker rmi mylocalyargen:mar252023 < - remove the locarepo and tag we commited earlier
docker load -i myexport.tar <- Image has now been remade

Task 7. Non-root user
*alpine base container*
cat <<EOF>> Dockerfile
FROM mylocalyargen:mar252023
RUN addgroup -S user && adduser -S non-root -G user
user non-root
EOF

docker build -t mylocalyargen:nonrootmar252023 .
docker run -dit --name yarGenNonroot -v tools:/tools -v samples:/samples --user root mylocalyargen:nonrootmar252023 <-need to fix file permissions
docker exec -it yarGenNonroot chown -R non-root:user /tools /samples
docker exec -it yarGenNonroot sh <- We are still root!!
docker stop yarGenNonroot
docker rm yarGenNonroot
docker run -dit --name yarGenNonroot -v tools:/tools -v samples:/samples mylocalyargen:nonrootmar252023
docker exec -it yarGenNonroot whoami <- non-root

**Now we have a limited user account that cannot benefit from root privileges inside containe while still running tools**

# Workshop 2 - Containers on Windows
*Container tools & commands*
We will create a windows volume and mount it using a non-existent folder.
c:\tools <- volume outside of container, mounted into container. Called tools in volumes

*docker*
docker pull mcr.microsoft.com/windows/servercore:ltsc2022

--create volume-
Volumes help store data out of containers. This helps store data in more permanet locations until the volume is removed.
docker volume create tools-volume

--create container from image with volume
Creating a container with create makes the data inside the container permanent until the container is removed.
docker create -t --name CoreTest -h CoreTest --mount source=tools-volume,target=c:\tools -i mcr.microsoft.com/windows/servercore:ltsc2022

--run single command-
Running a container with run is ephemeral and non-permanent.
docker run mcr.microsoft.com/windows/servercore:ltsc2022

---detach from running container
Press Ctrl-P, followed by Ctrl-Q???

--move new tools into container--
docker cp C:\Users\Administrator\Downloads\capa-v4.0.1-windows.zip CONTAINERNAME:c:\tools < Fails due to Adminstrator Path
docker cp C:\Users\Administrator\Downloads\7z2201-extra.7z CONTAINERNAME:c:\tools

--https://7-zip.org/a/7zr.exe
Invoke-WebRequest -Uri https://7-zip.org/a/7zr.exe -Method GET -UseBasicParsing -outfile c:\tools\7zr.exe

--https://github.com/mandiant/capa/releases/download/v5.0.0/capa-v5.0.0-windows.zip
Invoke-WebRequest -Uri https://github.com/mandiant/capa/releases/download/v5.0.0/capa-v5.0.0-windows.zip -Method GET -UseBasicParsing -outfile c:\tools\capa-v5.0.0-windows.zip

--https://7-zip.org/a/7z2201-extra.7z
Invoke-WebRequest -Uri https://7-zip.org/a/7z2201-extra.7z -Method GET -UseBasicParsing -outfile c:\tools\7z2201-extra.7z

.\7zr.exe e .\7z2201-extra.7z

Expand-Archive -LiteralPath .\capa-v5.0.0-windows.zip -DestinationPath .

--run interactive
docker exec -i ID or NAME cmd.exe

--stop container
docker stop ID or NAME

--save container changes to new image
docker commit 80a0a3b54672 REPO/servercore:11nov22

--export container
docker save REPO/servercore:11nov22 -o 11nov22.tar

--Expert mounted  
docker run -dit --name python-non-admin -v scripts:c:\scripts -v samples:c:\samples -v workshop_tools:c:\tools -v output:c:\output -v python_311:c:\python\ uctamas:apr222023

# Workshop 3 - Scripted Malware analysis

cd ~/RANSOMWARE-Caution/ech0raix
follow Docker-instructions.txt to launch container
use output for special scripted tools to help automate analysis
Use cleam-all.sh to remove older material < - Since sample is older, some artifcats wont be possible to recover
Use tmux-launch.sh to quikcly automate some analysis tools <- Since this is looped we need to control execution time
docker run --rm -it -v /home/kali/RANSOMWARE-Caution/ech0raix:/home/debian -w /home/debian/output ech0raix/jan302022am timeout 30s /home/debian/output/tmux-launch.sh

Workflow steps:

1) pull samples by using powershell to make a post request
$postParams = @{query='get_file';sha256_hash='094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d'}

Invoke-WebRequest -Uri https://mb-api.abuse.ch/api/v1/ -Method POST -Body $postParams -UseBasicParsing -outfile c:\samples\094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d.zip

2) decompress, powershell cannot extract 7z files with passwords due to missing compression algorithm
*7z*
c:\tools\7za x -pinfected c:\samples\094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d.zip

3) run tool or tools, your local Windows AV will prevent some samples, send only your strongest warriors that bypass defenses!
*capa*
./capa.exe c:\samples\094fd325049b8a9cf6d3e5ef2a6d4cc6a567d7d49c35f8bb8dd9e3c6acf3d78d.exe

4) add tor
docker pull alpine:latest
pull files from https://github.com/klemmchr/tor-alpine
run tor-alpine.sh

5) add mitm proxy
docker pull mitmproxy/mitmproxy:latest
docker run --rm -it [-v ~/.mitmproxy:/home/mitmproxy/.mitmproxy] -p 8080:8080 mitmproxy/mitmproxy

6) save output to volume

7) ingest into searchable
